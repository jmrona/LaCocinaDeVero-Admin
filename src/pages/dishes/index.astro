---
import Modal from "@/components/Modal.astro";
import Pagination from "@/components/Pagination.astro";
import Table, { type Action, type TableHeaders } from "@/components/Table.astro";
import Layout from "@/layouts/Layout.astro";
import { getCategories } from "@/lib/getCategories";
import { getDishes } from "@/lib/getDishes";
import { getTotalDishes } from "@/lib/getTotalDishes";
import { Pen, Trash, Plus, Funnel, Check } from "@lucide/astro";

export const prerender = false;
let totalDishes = await getTotalDishes() as number;

const page = Astro.url.searchParams.get('page') ?? '1';
const perPage = Astro.url.searchParams.get('perPage') ?? '10';
let totalPages = Math.round(totalDishes / parseInt(perPage));


const sortBy = Astro.url.searchParams.get('sortBy') || "name";
const order = Astro.url.searchParams.get('order') || "asc";
const search = Astro.url.searchParams.get('search') || undefined;
const categoriesFilter = Astro.url.searchParams.get('cat')?.split(',') || undefined;

const categories = await getCategories(1, 100);

let dishes = await getDishes(parseInt(page), parseInt(perPage), sortBy, order, search, categoriesFilter);

if(search) {
  dishes = dishes.filter(dish => dish.name.es.toLowerCase().includes(search.toLowerCase()));
  totalPages = Math.floor(dishes.length / parseInt(perPage));
  totalDishes = dishes.length;
}

const tableHeader: TableHeaders[] = [
    {
      label: "Nombre",
      key: ["name"],
      value: (data) => data.name.es,
      headerProps: {"data-header": "name", "data-sortable": `${search ? "false" : "true"}`, "data-sort": `${sortBy === "name" ? order : ""}`},
      className: "cursor-pointer",
    },
    {
      label: "Precio",
      key: ["price"],
      value: (data) => `${data.price.toFixed(2)}€`,
      headerProps: {"data-header": "price", "data-sortable": `${search ? "false" : "true"}`, "data-sort": `${sortBy === "price" ? order : ""}`},
      className: "cursor-pointer",
    },
    {
      label: "Categorías",
      description: "adasd",
      key: ["categories"],
      value: (data: Record<string, any>) => data.categories.join(", ") || "-",
      headerProps: {"data-header": "categories", "data-sortable": "false", "data-sort": `${sortBy === "categories" ? order : ""}`},
    },
    {
      label: "Alérgenos",
      key: ["allergens"],
      value: (data: Record<string, any>) => data.allergens.join(", ") || "-",
      headerProps: {"data-header": "allergens", "data-sortable": "false", "data-sort": `${sortBy === "allergens" ? order : ""}`},
    },
];

const actions: Action[] = [
    {
      label: "Editar",
      icon: Pen,
      iconProps: { size: 20, className: "text-gray-600" },
      id: (data) => `edit-${data.id}`,
      className: "text-gray-600 cursor-pointer text-[12px] flex flex-col justify-center items-center w-fit",
    },
    {
      label: "Eliminar",
      icon: Trash,
      iconProps: { size: 20, className: "text-gray-600" },
      id: (data) => `delete-${data.id}`,
      className: "text-gray-600 cursor-pointer text-[12px] flex flex-col justify-center items-center w-fit",
    },
];
---

<Layout title="Platos - La cocina de Vero">
    <div class="flex justify-between">
      <h1 class="text-2xl font-semibold text-balance mb-3">Platos</h1>
      <div class="w-fit">
        <a href="/dishes/new" class="bg-primary text-white rounded-md px-4 py-2 text-sm font-medium flex gap-2" data-slot="new-dish-btn">
          <Plus size={20}/> Añadir nuevo plato
        </a>
      </div>
    </div>
    <f class="relative flex gap-2">
      <input type="search" id="search-dish" name="search" placeholder="Buscar..." class="w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" />
      <button type="button" id="btn-filter" class="btn" data-slot="filter-btn">
        <Funnel size={20}/>
      </button>
      <div id="filter-cat-container" class="absolute hidden bg-white shadow rounded-md z-10 right-14">
        <form id="dishes-cat-filter" class="columns-2 gap-0" enctype="multipart/form-data">
          {categories.map(cat => {
            return (
              <label class="flex gap-2 px-4 py-2 items-center border-b border-gray-300 cursor-pointer">
                <input type="checkbox" name="categories" value={cat.category_id} class="accent-primary" checked={categoriesFilter?.some(category => category == cat.category_id)}>
                <span class="text-sm text-gray-700">{cat.name.es}</span>
              </label>
            )
          })}
        </form>
        <button type="submit" class="btn my-1 w-[calc(100%-8px)] mx-auto" form="dishes-cat-filter">
          <Check size={20}/>
          <span class="w-full text-center block">Filtrar por categoría</span>
        </button>

        <button id="clear-cat-filter-btn" type="button" class="text-primary bg-white btn my-1 w-[calc(100%-8px)] justify-center mx-auto">
          Limpiar filtro
        </button>
      </div>
    </f>
    
    <Table 
        data={dishes} 
        columns={tableHeader} 
        caption={`Página ${page} de ${totalPages}, mostrando ${dishes.length} platos`} 
        actions={actions} />

    {totalPages > 1 && <Pagination 
        path="/dishes"
        page={parseInt(page)} 
        perPage={parseInt(perPage)} 
        totalPages={totalPages}
        className="mt-3" />}
</Layout>

<Modal id="delete-dish">
  <form method="dialog" class="flex flex-col gap-4 px-8 py-12 bg-white rounded-lg drop-shadow-xl">
    <h3 class="text-lg font-medium leading-6 text-gray-900">¿Estás seguro de que deseas eliminar este plato?</h3>
    <div class="mt-2">
      <p class="text-sm text-gray-500">
        Esta acción no se puede deshacer.
      </p>
    </div>
    
    <span class="w-full [&[aria-hidden=true]]:hidden mx-auto text-center block" aria-hidden="true" data-slot="deleting-msg">Deleting...</span>

    <div class="mt-4 w-full flex justify-end gap-4">
      <button type="button" data-slot="delete-button" class="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:text-sm [&[disabled=true]]:cursor-not-allowed [&[disabled=true]]:grayscale-75 [&[disabled=true]]:select-none">
        Eliminar
      </button>
      <button type="button" data-slot="cancel-button" class="inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm [&[disabled=true]]:cursor-not-allowed [&[disabled=true]]:grayscale-75 [&[disabled=true]]:select-none">
        Cancelar
      </button>
    </div>
  </form>
</Modal>


<script>
    document.addEventListener('DOMContentLoaded', function() {
      const url = new URL(window.location.href);
      const search = url.searchParams.get('search');

      const searchDish = document.querySelector('#search-dish') as HTMLInputElement;
      if(search) {
        searchDish.value = search;
        searchDish.focus();
      } else {
        url.searchParams.delete('search');
      }

      searchDish?.addEventListener('change', function() {
        const searchValue = searchDish.value;

        if(searchValue === '') url.searchParams.delete('search');
        else url.searchParams.set('search', searchValue);

        window.location.href = url.toString();
      })
  
      const headers = document.querySelectorAll('[data-slot="table-head"][data-sortable=true]');
      headers.forEach(header => {
          header.addEventListener('click', function() {
              const sort = header.getAttribute('data-sort') === 'asc' ? 'desc' : 'asc';
              const url = new URL(window.location.href);
              url.searchParams.set('sortBy', header.getAttribute('data-header') || '');
              url.searchParams.set('order', sort);
              window.location.href = url.toString();
          })
      })
  
      const editButtons = document.querySelectorAll('[data-slot="table-cell"] button[id^="edit-"]');
      editButtons.forEach(button => {
          button.addEventListener('click', function() {
            const [_, id] = button.id.split('-');
              window.location.href = `/dishes/${id}`;
          })
      })
  
      const deleteButtons = document.querySelectorAll('[data-slot="table-cell"] button[id^="delete-"]');
      deleteButtons.forEach(button => {
          button.addEventListener('click', function() {
              const [_, id] = button.id.split('-');
              const newEvent = new CustomEvent('delete-dish', {
                  detail: {
                      id
                  }
              });
              document.dispatchEvent(newEvent);
          })
      })
  
      const modal = document.querySelector('dialog[id="delete-dish"]') as HTMLDialogElement;
      document.addEventListener('delete-dish', function(e: CustomEvent) {
          modal?.showModal();
  
          const deleteButton = modal?.querySelector('button[data-slot="delete-button"]');
          const cancelButton = modal?.querySelector('button[data-slot="cancel-button"]');
          const deletingMsg = modal?.querySelector('span[data-slot="deleting-msg"]');
  
  
          deleteButton?.setAttribute('data-id', e.detail.id);
          deleteButton?.addEventListener('click', async function() {
            const dishId = deleteButton.getAttribute('data-id');
  
            async function deleteDish(dishId: string) {
  
                deleteButton?.setAttribute('disabled', 'true');
                cancelButton?.setAttribute('disabled', 'true');
                deletingMsg?.setAttribute('aria-hidden', 'false');
  
                const response = await fetch(`/api/delete-dish`, {
                  method: "DELETE",
                  body: JSON.stringify({
                    dishId
                  }),
                  
                  headers: {
                    "Content-Type": "application/json",
                  },
                });
            }
  
            dishId && await deleteDish(dishId);
  
            modal?.close();
            window.location.reload();
          })
  
          cancelButton?.addEventListener('click', function() {
              modal?.close();
          })
      })
    })
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const url = new URL(window.location.href);

    const btnFilter = document.querySelector('#btn-filter');
    const filterModal = document.querySelector('#dishes-cat-filter');
    const form = document.querySelector('#dishes-cat-filter') as HTMLFormElement;
    const clearFilterBtn = document.querySelector('#clear-cat-filter-btn');

    btnFilter?.addEventListener('click', function() {
      filterModal?.closest("div#filter-cat-container")?.classList.toggle('hidden');
    })

    form?.addEventListener('submit', function(e) {
      e.preventDefault();

      const data = new FormData(form);
      const categories = [...new Set(Array.from(data.getAll("categories")).map(category => category))]; 
      url.searchParams.set('cat', categories.join(','));
      window.location.href = url.toString();
    })

    clearFilterBtn?.addEventListener('click', function() {
      url.searchParams.delete('cat');
      window.location.href = url.toString();
    })
  })
</script>